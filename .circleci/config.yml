version: 2.1

commands:
  destroy_infrastructure:
    steps:
      - run:
          name: "Destroy cloud formation stack"
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name ciStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region=us-west-2

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Create cloud formation stack"
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name ciStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region=us-west-2

  configure_infrastructure:
    docker: 
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["32:1c:2c:eb:b2:ea:c5:6a:21:a7:05:ac:5b:16:c9:23"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure Server
          command: |
            ansible-playbook -i inventory.txt main4.yml

  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com1/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - destroy_infrastructure

########################################################################################

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="my-bucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://my-bucket-${CIRCLE_WORKFLOW_ID:0:7} --delete --region=us-west-2

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name=='PipelineID'].Value" \
              --no-paginate --output text > ~/textfile.txt --region=us-west-2
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name prod-distro \
              --parameter-overrides PipelineID="my-bucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack
          command: |
            echo "cat textfile.txt"
            cat ~/textfile.txt
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
            aws cloudformation delete-stack \
              --stack-name "stack-create-bucket-${OldBucketID}" \
              --region=us-west-2

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  deployment-workflow:
    jobs:
      # - create_infrastructure

      # - configure_infrastructure

      # - smoke_test:
      #     requires:
      #       - create_infrastructure

      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
            